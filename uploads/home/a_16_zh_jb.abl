MODULE TEC_new
TITLE  'controller component'
                "a_16_zh_jb.abl   2016/10/31 
DECLARATIONS 
RESET,CLK      pin 151,68;                         "系统复位和时钟信号
IR15..IR0      pin 64..57,54..47;                  "指令寄存器的输出信号
IR_G,IR_clk    pin 174,175;                        "IR的的接收控制和时钟
Cy,Zero        pin 169,171;                        "Am2901产生的标志位信息
AB15..AB0      pin 87..80,77..70;                  "地址总线
DB15..DB0      pin 24,23,26,25,28,27,30,29,32..39; "数据总线
MIO,REQ,WE     pin 95,94,93    istype 'dc,com';    "控制内存和串口的信号
I8..I0         pin 14..21, 135 istype 'dc,com';    "控制运算器的信号
B3..B0,A3..A0  pin 9..12, 5..8 istype 'com';
aluoe,ram15,ram0,c0 pin 136,137,139,141 istype 'com';
T2..T0, F_C,F_Z     pin 162,160,158,168,170;       "显示节拍编码和标志位
pc15..pc0,  ar15..ar0   node istype 'reg,keep';    "程序计数器、地址寄存器
npc15..npc0             node istype 'reg,keep';    "暂存主程序断点的寄存器
t_2..t_0,flag_c,flag_z  node istype 'reg,keep';    "节拍发生器、标志寄存器
pc_ce,ar_ce             node istype 'com';         "PC、AR的接收条件信号
flag_c_ce,flag_z_ce     node istype 'com';         "标志位的接收条件信号
A_,B_ ,jr_5, DB_oe      node istype 'com';         "中间信号、允许MACH送信息到DB
sum15..sum0             node istype 'com';         "专用加法器电路
wk15..wk0, cy15..cy1    node istype 'com';         "加法器一路输入、每位进位输出
A_zu,B_zu, D_zu, shift  node istype 'com';         "指令分组 
arith,logic,jr_zu       node istype 'com';
M_IO,temp               node istype 'com';
flag_c_in,AB_sel        node istype 'com';
inst15..inst0           node istype 'com';
dst_2,dst_1,dst_0       pin 106,105,104 istype 'com';
 
timing=[t_2..t_0];       c,z,x=.C.,.Z.,.X.;     "说明常量和集合
cif =(timing==[0,0,0]);  cmem1=(timing==[0,1,1]);
cexe=(timing==[0,1,0]);  cmem2=(timing==[0,0,1]);
pc=[pc15..pc0];   IR=[IR15..IR0];  ar=[ar15..ar0];  npc=[npc15..npc0];
DB=[DB15..DB0];   AB=[AB15..AB0];  sum=[sum15..sum0];
ir_op=[IR15..IR8];                              "给出每条指令的操作码和汇编语句名
ADD = (ir_op==[0,0,0,0,0,0,0,0]);  SUB = (ir_op==[0,0,0,0,0,0,0,1]); "算逻指令9条
DEC = (ir_op==[0,0,0,0,1,0,0,0]);  INC = (ir_op==[0,0,0,0,1,0,0,1]);
CMP = (ir_op==[0,0,0,0,0,0,1,1]);  AND = (ir_op==[0,0,0,0,0,0,1,0]);
XOR_= (ir_op==[0,0,0,0,0,1,0,0]);  TEST= (ir_op==[0,0,0,0,0,1,0,1]);
OR_ = (ir_op==[0,0,0,0,0,1,1,0]);
SHL = (ir_op==[0,0,0,0,1,0,1,0]);  SHR = (ir_op==[0,0,0,0,1,0,1,1]); "移位指令2条
MVRD= (ir_op==[1,0,0,0,1,0,0,0]);  MVRR= (ir_op==[0,0,0,0,0,1,1,1]); "传送指令2条
JRC = (ir_op==[0,1,0,0,0,1,0,0]);  JRZ = (ir_op==[0,1,0,0,0,1,1,0]); "转移指令6条
JRNC= (ir_op==[0,1,0,0,0,1,0,1]);  JRNZ= (ir_op==[0,1,0,0,0,1,1,1]);
JR  = (ir_op==[0,1,0,0,0,0,0,1]);  JMPA= (ir_op==[1,0,0,0,0,0,0,0]);
IN_ = (ir_op==[1,0,0,0,0,0,1,0]);  OUT = (ir_op==[1,0,0,0,0,1,1,0]); "输入输出指令2条
LDRR= (ir_op==[1,0,0,0,0,0,0,1]);  STRR= (ir_op==[1,0,0,0,0,0,1,1]); "读写内存指令6条
PUSH= (ir_op==[1,0,0,0,0,1,0,1]);  POP = (ir_op==[1,0,0,0,0,1,1,1]);  
PSHF= (ir_op==[1,0,0,0,0,1,0,0]);  POPF= (ir_op==[1,0,0,0,1,1,0,0]);
RET = (ir_op==[1,0,0,0,1,1,1,1]);  CALA= (ir_op==[1,1,0,0,1,1,1,0]); "子程序返回/调用
LDPC= (ir_op==[1,0,0,0,1,0,0,1]);                                    "特权指令  各1条

link1, link0  pin 164,163;             "２个功能开关
YY7..YY4,YY1  pin 126,127,124,125,120; "提示可手拨指令的4个灯,244芯片的G信号 
EQUATIONS
  temp=cif#cexe&(MVRD#JMPA#CALA);      "读取指令的节拍
  MIO=M_IO&((link1& link0#!link1&!link0)         "正常的运行方式
           #(link1&!link0#!link1& link0)&!temp)  "片内或手拨方式非取指指周
           #(link1&!link0#!link1& link0)& temp;  "手拨或片内方式  取指周期  
  [YY7..YY4]=link1&!link0&[temp,temp,temp,temp]; "４个灯亮提示可手拨指令
  !YY1 =temp&link1&!link0;                       "244芯片的输出使能信号G
 
  [T2,T1,T0]=[t_2,t_1,t_0];     "显示节拍编码
  F_C=flag_c;   F_Z=flag_z;             "显示标志位信息
  [dst_2,dst_1,dst_0]=[t_2,t_1,t_0];

                                   "寄存器电路的接收条件和时钟信号
  pc_ce=RESET #!RESET&( cif#cexe&(MVRD#JMPA#CALA#jr_5)
                      # cmem1&(RET#LDPC) );
  pc.clk=CLK;   pc.ce=pc_ce;   timing.clk=CLK;
  jr_5=JR#JRNC&!flag_c#JRC&flag_c               "相对转移指令的转移条件
         #JRNZ&!flag_z#JRZ&flag_z;
  A_zu=!IR15#MVRD#JMPA#IN_#OUT;
  B_zu=LDRR#STRR#PUSH#POP#PSHF#POPF#RET#LDPC;   "要读写数据存储器的指令
  D_zu=CALA;
  arith=ADD#SUB#CMP#DEC#INC;                    "算术运算指令
  logic=AND#TEST#OR_#XOR_;                      "逻辑运算指令
  shift=SHL#SHR;                                "移位指令
                                   "复位时,为PC、timing 赋初值为0
  when RESET  then { pc=0; timing:=[0,0,0]; } else "系统运行状态
   { when cif then timing:=[0,1,0];                "TIMING状态转换
     when cexe&(B_zu#D_zu) then timing:=[0,1,1];
     when cmem1&D_zu then timing:=[0,0,1];
                                                "PC接收指令地址
     when cif#cexe&(MVRD#jr_5) then pc=sum;        "sum(PC+1或PC+offset)
     when cexe &(JMPA#CALA)                        "来自内存或运算器
         #cmem1&(RET #LDPC)    then pc=DB;
   } IR_G=!cif;   IR_clk=CLK;                      "IR的接收条件和时钟信号

  npc.clk=CLK; npc.ce=cexe&CALA;                   "NPC暂存主程序断点
  when cexe&CALA then npc=sum;
  ar_ce=cexe&B_zu #cmem1&CALA; ar.ce=ar_ce;        "AR 的接收条件
  when ar_ce then ar=DB; ar.clk=CLK;               "AR 接收内存地址

  AB_sel=cmem1&B_zu#cmem2&CALA;                    "AB 的信息来源选择
  when AB_sel then AB=ar; else AB=pc;                  "ar或PC
 
  DB.oe=DB_oe; DB_oe=cmem2&CALA#cmem1&PSHF         "DB 接收MACH送来的
                    #temp&!link1&link0;                "要有三态控制
  when cmem2&CALA then DB=npc;                         "存程序断点
  when cmem1&PSHF then {[DB15..DB8]=^h00;              "存程序状态字
    [DB7..DB0]=[flag_c,flag_z,0,0,0,0,0,0];}
  when temp&!link1&link0 then DB=[inst15..inst0];      "送片内指令到IR
                                                   "FLAG 的接收 或保持
  flag_c_ce =cexe&(arith#shift#logic)#cmem1&POPF;
  flag_c_in =cexe&(SHR&ram0#SHL&ram15#arith&Cy#logic&0)#cmem1&POPF&DB7;
  when flag_c_ce then flag_c:=flag_c_in                "flag_c接收
            else flag_c:=flag_c;   flag_c.clk=CLK; 
  flag_z_ce =cexe&(arith#logic) # cmem1&POPF;
  when flag_z_ce then
    flag_z:=cexe&(arith#logic)&Zero #cmem1&POPF&DB6;   "flag_z接收
            else flag_z:=flag_z;   flag_z.clk=CLK;
                                             "运算器使用的寄存器编号转换
  when ([A_,B_]==[0,0]) then {[B3..B0]=[IR7..IR4]; [A3..A0]=[IR3..IR0];}
  when ([A_,B_]==[0,1]) then {[B3..B0]=[0,1, 0,0]; [A3..A0]=[0,1, 0,0];}
  when ([A_,B_]==[1,0]) then {[B3..B0]=[0,0, 0,0]; [A3..A0]=[0,0, 0,0];}
  ram15=0;   ram15.oe=!I7;       "右移指令的最高位输入
  ram0 =0;   ram0.oe = I7;       "左移指令的最低位输入

@include 'adder_pc.abl'          "描述指令地址加法器的程序段
TRUTH_TABLE              "选用真值表描述用于控制运算器、内存、接口的信号
([t_2..t_0,IR15..IR8]->[aluoe,c0,I8..I6,I5..I3,I2..I0,A_,B_,M_IO,REQ,WE])         "flag
[0,0,0, x,x,x,x,x,x,x,x]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "MEM→IR,PC+1→PC
[0,1,0, 0,0,0,0,0,0,0,0]->[0,0, 0,1,1, 0,0,0, 0,0,1, 0,0, 1,0,0]; "ADD  DR+SR→DR  c,z,s
[0,1,0, 0,0,0,0,0,0,0,1]->[0,1, 0,1,1, 0,0,1, 0,0,1, 0,0, 1,0,0]; "SUB  DR-SR→DR  c,z,s
[0,1,0, 0,0,0,0,0,0,1,1]->[0,1, 0,0,1, 0,0,1, 0,0,1, 0,0, 1,0,0]; "CMP  DR-SR      c,z,s
[0,1,0, 0,0,0,0,0,1,1,0]->[0,0, 0,1,1, 0,1,1, 0,0,1, 0,0, 1,0,0]; "OR   DR#SR→DR  0,z,s
[0,1,0, 0,0,0,0,0,0,1,0]->[0,0, 0,1,1, 1,0,0, 0,0,1, 0,0, 1,0,0]; "AND  DR&SR→DR  0,z,s
[0,1,0, 0,0,0,0,0,1,0,1]->[0,0, 0,0,1, 1,0,0, 0,0,1, 0,0, 1,0,0]; "TEST DR&SR      0,z,s
[0,1,0, 0,0,0,0,0,1,0,0]->[0,0, 0,1,1, 1,1,0, 0,0,1, 0,0, 1,0,0]; "XOR_ DR$SR→DR  0,z,s
[0,1,0, 0,0,0,0,1,0,0,0]->[0,0, 0,1,1, 0,0,1, 0,1,1, 0,0, 1,0,0]; "DEC  DR-1→DR   c,z,s
[0,1,0, 0,0,0,0,1,0,0,1]->[0,1, 0,1,1, 0,0,0, 0,1,1, 0,0, 1,0,0]; "INC  DR+1→DR   c,z,s
[0,1,0, 0,0,0,0,1,0,1,0]->[0,0, 1,1,1, 0,0,0, 0,1,1, 0,0, 1,0,0]; "SHL  DR*2→DR   c / /
[0,1,0, 0,0,0,0,1,0,1,1]->[0,0, 1,0,1, 0,0,0, 0,1,1, 0,0, 1,0,0]; "SHR  DR/2→DR   c / /
[0,1,0, 0,0,0,0,0,1,1,1]->[0,0, 0,1,1, 0,0,0, 1,0,0, 0,0, 1,0,0]; "MVRR SR→DR
[0,1,0, 0,1,0,0,0,0,0,1]->[0,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 1,0,0]; "JR   PC+offset →PC
[0,1,0, 0,1,0,0,0,1,0,0]->[0,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 1,0,0]; "JRC  PC+offset?→PC
[0,1,0, 0,1,0,0,0,1,0,1]->[0,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 1,0,0]; "JRNC PC+offset?→PC
[0,1,0, 0,1,0,0,0,1,1,0]->[0,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 1,0,0]; "JRZ  PC+offset?→PC
[0,1,0, 0,1,0,0,0,1,1,1]->[0,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 1,0,0]; "JRNZ PC+offset?→PC
[0,1,0, 1,0,0,0,0,0,1,0]->[1,0, 0,1,1, 0,0,0, 1,1,1, 1,0, 0,1,1]; "IN_ (PORT)→R0
[0,1,0, 1,0,0,0,0,1,1,0]->[0,0, 0,0,1, 0,0,0, 1,0,0, 1,0, 0,1,0]; "OUT  R0→(PORT)
[0,1,0, 1,0,0,0,0,0,0,0]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "JMPA MEM→PC
[0,1,0, 1,0,0,0,1,0,0,0]->[1,0, 0,1,1, 0,0,0, 1,1,1, 0,0, 0,0,1]; "MVRD MEM→DR,PC+1→PC

[0,1,0, 1,1,0,0,1,1,1,0]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "CALA MEM→PC,PC+1→NPC
[0,1,0, 1,0,0,0,1,0,0,1]->[0,0, 0,0,1, 0,0,0, 1,0,0, 0,0, 1,0,0]; "LDPC SR→AR
[0,1,0, 1,0,0,0,0,0,0,1]->[0,0, 0,0,1, 0,0,0, 1,0,0, 0,0, 1,0,0]; "LDRR SR→AR
[0,1,0, 1,0,0,0,0,0,1,1]->[0,0, 0,0,1, 0,0,0, 0,1,1, 0,0, 1,0,0]; "STRR DR→AR
[0,1,0, 1,0,0,0,0,1,1,1]->[0,1, 0,1,0, 0,0,0, 0,1,1, 0,1, 1,0,0]; "POP  sp→AR,sp+1→sp
[0,1,0, 1,0,0,0,1,1,0,0]->[0,1, 0,1,0, 0,0,0, 0,1,1, 0,1, 1,0,0]; "POPF sp→AR,sp+1→sp
[0,1,0, 1,0,0,0,1,1,1,1]->[0,1, 0,1,0, 0,0,0, 0,1,1, 0,1, 1,0,0]; "RET  sp→AR,sp+1→sp
[0,1,0, 1,0,0,0,0,1,0,1]->[0,0, 0,1,1, 0,0,1, 0,1,1, 0,1, 1,0,0]; "PUSH sp-1→AR,sp
[0,1,0, 1,0,0,0,0,1,0,0]->[0,0, 0,1,1, 0,0,1, 0,1,1, 0,1, 1,0,0]; "PSHF sp-1→AR,sp

[0,1,1, 1,1,0,0,1,1,1,0]->[0,0, 0,1,1, 0,0,1, 0,1,1, 0,1, 1,0,0]; "CALA sp-1→AR,SP
[0,1,1, 1,0,0,0,0,0,0,1]->[1,0, 0,1,1, 0,0,0, 1,1,1, 0,0, 0,0,1]; "LDRR MEM→DR
[0,1,1, 1,0,0,0,0,1,1,1]->[1,0, 0,1,1, 0,0,0, 1,1,1, 0,0, 0,0,1]; "POP  MEM→DR
[0,1,1, 1,0,0,0,1,0,0,1]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "LDPC MEM→PC
[0,1,1, 1,0,0,0,1,1,1,1]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "RET  MEM→PC
[0,1,1, 1,0,0,0,1,1,0,0]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,1]; "POPF MEM→flag  c,z,s
[0,1,1, 1,0,0,0,0,0,1,1]->[0,0, 0,0,1, 0,0,0, 1,0,0, 0,0, 0,0,0]; "STRR SR→MEM
[0,1,1, 1,0,0,0,0,1,0,1]->[0,0, 0,0,1, 0,0,0, 1,0,0, 0,0, 0,0,0]; "PUSH SR→MEM
[0,1,1, 1,0,0,0,0,1,0,0]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,0]; "PSHF flag→MEM
[0,0,1, 1,1,0,0,1,1,1,0]->[1,0, 0,0,1, 0,0,0, 0,0,0, 0,0, 0,0,0]; "CALA NPC →MEM
"([t_2..t_0,IR15..IR8]-> [aluoe,c0,I8..I6,I5..I3,I2..I0,A_,B_,MIO,REQ,WE])

TRUTH_TABLE      "16个字的ROM电路,用于编辑、保存调试程序
([pc4..pc0]->[inst15..inst0])
[0,0,0,0,0]->[1,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0]; "mvrd r0,4e
[0,0,0,0,1]->[0,0,0,0,0,0,0,0, 0,1,0,0,1,1,1,0]; "
[0,0,0,1,0]->[1,0,0,0,0,1,1,0, 1,0,0,0,0,0,0,1]; "out 81
[0,0,0,1,1]->[1,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0]; "mvrd r0,37
[0,0,1,0,0]->[0,0,0,0,0,0,0,0, 0,0,1,1,0,1,1,1]; "
[0,0,1,0,1]->[1,0,0,0,0,1,1,0, 1,0,0,0,0,0,0,1]; "out 81
[0,0,1,1,0]->[1,0,0,0,1,0,0,0, 0,1,0,0,0,0,0,0]; "mvrd r4,2780
[0,0,1,1,1]->[0,0,1,0,0,1,1,1, 1,0,0,0,0,0,0,0]; "
[0,1,0,0,0]->[1,0,0,0,0,1,1,0, 1,0,0,0,0,0,0,0]; "out 80
[0,1,0,0,1]->[0,0,0,0,0,1,1,1, 0,0,0,1,0,0,0,0]; "mvrr r1,r0
[0,1,0,1,0]->[1,0,0,0,0,0,1,0, 1,0,0,0,0,0,0,1]; "in 81
[0,1,0,1,1]->[0,0,0,0,1,0,1,1, 0,0,0,0,0,0,0,0]; "shr r0
[0,1,1,0,0]->[0,1,0,0,0,1,0,1, 1,1,1,1,1,1,0,1]; "jrnc 000a
[0,1,1,0,1]->[0,0,0,0,0,1,1,1, 0,0,0,0,0,0,0,1]; "mvrr r0,r1
[0,1,1,1,0]->[1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0]; "jmpa 0008
[0,1,1,1,1]->[0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0]; "
END
